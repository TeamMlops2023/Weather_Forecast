pipeline {
    agent any
    environment {
        KUBECONFIG = '/var/jenkins_home/.kube/config'
    }
    stages {
        stage('Prepare Environment') {
            steps {
                sh 'rm -rf Weather_Forecast'
            }
        }
        stage('Get kind-Kubeconfig') {
            steps {
                sh 'curl -LJO https://github.com/TeamMlops2023/Weather_Forecast/raw/BAS_ALAIN/kubernetes/kind-kubeconfig'
                echo 'kind-Kubeconfig récupéré depuis GitHub.'
            }
        }
        stage('Build and Push Database Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub_credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh 'docker build -t mlopsweather2023/database-image:latest ./database'
                        echo 'Construction de l\'image Docker de la base de données réussie.'
                        sh 'echo $DOCKER_PASS | docker login --username $DOCKER_USER --password-stdin'
                        echo 'Connexion à Docker Hub réussie.'
                        sh 'docker push mlopsweather2023/database-image:latest'
                        echo 'Image Docker de la base de données poussée vers Docker Hub.'
                    }
                }
            }
        }
        stage('Setup and Test Database') {
            steps {
                script {
                    // Exécution des tests de base de données ici
                    // Par exemple, vous pouvez utiliser des commandes Docker pour exécuter des tests locaux
                    sh 'docker run -d --name mysql-container -e MYSQL_ROOT_PASSWORD=mysecretpassword mysql:latest'
                    sh 'docker exec mysql-container mysql -uroot -pmysecretpassword -e "CREATE DATABASE IF NOT EXISTS mlops_weather;"'
                    sh 'docker exec mysql-container mysql -uroot -pmysecretpassword mlops_weather -e "CREATE TABLE IF NOT EXISTS weather_predictions (id INT PRIMARY KEY, date DATE, location VARCHAR(255), prediction INT, accuracy FLOAT);"'
                    sh 'docker exec mysql-container mysql -uroot -pmysecretpassword mlops_weather -e "INSERT INTO weather_predictions (id, date, location, prediction, accuracy) VALUES (41053, '\''2016-04-16'\'', '\''Norfolk Island'\'', 0, 0.886467);"'
                    sh 'docker exec mysql-container mysql -uroot -pmysecretpassword mlops_weather -e "SELECT * FROM weather_predictions;"'
                }
            }
        }
        stage('Cleanup Test Container') {
            steps {
                script {
                    sh 'docker stop mysql-container || true'
                    sh 'docker rm mysql-container || true'
                    echo 'Arrêt et nettoyage du conteneur de test de base de données réussi.'
                }
            }
        }
        stage('Clone Git Repo and Copy Deployment Files') {
            steps {
                script {
                    sh 'git clone -b BAS_ALAIN --single-branch https://github.com/TeamMlops2023/Weather_Forecast.git'
                    sh 'cp Weather_Forecast/kubernetes/database/database-deployment.yaml .'
                    sh 'cp Weather_Forecast/kubernetes/database/database-service.yaml .'
                }
            }
        }
        stage('Deploy Database to Kubernetes') {
            steps {
                script {
                    sh 'docker cp ./database-deployment.yaml kind-control-plane:/database-deployment.yaml'
                    sh 'docker cp ./database-service.yaml kind-control-plane:/database-service.yaml'
                    sh "docker exec kind-control-plane kubectl apply -f /database-deployment.yaml --validate=false"
                    sh "docker exec kind-control-plane kubectl apply -f /database-service.yaml --validate=false"
                    echo 'Déploiement de la base de données sur Kubernetes réussi.'
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline terminée. Vérifiez les logs pour les détails.'
        }
    }
}
