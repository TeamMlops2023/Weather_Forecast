pipeline {
    agent any

    stages {
        stage('Checkout SCM') {
            steps {
                // Checkout your source code from Git repository
                checkout scm
            }
        }

        stage('Start Database') {
            steps {
                script {
                    // Start MySQL container
                    def mysqlContainer = docker.image('mysql:5.7')
                        .withRun([name: 'mysql-container', env: ['MYSQL_ROOT_PASSWORD=mysecretpassword', 'MYSQL_DATABASE=mlops_weather', '3306:3306']])
                    echo 'Lancement du conteneur de la base de données réussi.'
                    // Attendre que la base de données soit prête
                    sh 'sleep 30'
                }
            }
        }

        stage('Build Model Image') {
            steps {
                script {
                    // Build Docker image for your ML model
                    docker.build('modele-image', '.')
                    echo 'Construction de l\'image Docker réussie.'
                }
            }
        }

        stage('Test Database') {
            steps {
                script {
                    // Insertion des données de test
                    sh """
                    mysql -h 127.0.0.1 -P 3306 -umlops -pmlops mlops_weather -e "
                    INSERT INTO weather_predictions (id, date, location, prediction, accuracy) VALUES
                    (41053, '2016-04-16', 'Norfolk Island', 0, 0.886467),
                    (41054, '2016-04-17', 'Norfolk Island', 0, 0.886467);
                    // Autres données
                    "
                    """

                    // Vérification des données insérées
                    sh """
                    mysql -h 127.0.0.1 -P 3306 -umlops -pmlops mlops_weather -e "
                    SELECT * FROM weather_predictions;
                    "
                    """
                }
            }
        }

        stage('Run Model and Populate Database') {
            steps {
                script {
                    // Run the model inside a Docker container and link it to the MySQL container
                    docker.image('modele-image')
                        .withRun(['-d', '--rm', '--link mysql-container:mysql', 'modele-image'])
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    // Nettoyage : Arrêter et supprimer le conteneur de la base de données
                    def mysqlContainer = docker.container('mysql-container')
                    if (mysqlContainer) {
                        mysqlContainer.stop()
                        mysqlContainer.remove()
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up Docker resources
            script {
                docker.image('mysql:5.7').stop()
                docker.image('mysql:5.7').remove()
                docker.image('modele-image').remove()
            }
        }
    }
}
