pipeline {
    agent any
    environment {
        KUBECONFIG = '/var/jenkins_home/.kube/config'
    }
    stages {
        stage('Clone Repository') {
            steps {
                sh 'rm -rf Weather_Forecast'
                sh 'git clone -b BAS_ALAIN --single-branch https://github.com/TeamMlops2023/Weather_Forecast.git'
            }
        }
        stage('Build ML Model Image') {
            steps {
                script {
                    dir('Weather_Forecast/machine_learning') {
                        sh 'docker build -t mlopsweather2023/ml-model-image:latest .'
                        echo 'Construction de l\'image Docker ML Model réussie.'
                    }
                }
            }
        }
        stage('Run Tests') {
            steps {
                script {
                    // Nettoyer le conteneur s'il existe déjà
                    sh 'docker stop ml-model-test-container || true'
                    sh 'docker rm ml-model-test-container || true'

                    // Créer un conteneur temporaire pour exécuter les tests
                    sh 'docker run --name ml-model-test-container -d mlopsweather2023/ml-model-image:latest'
                    sh 'docker exec ml-model-test-container python /app/tests/test_modele.py'

                    // Nettoyer le conteneur après les tests
                    sh 'docker stop ml-model-test-container'
                    sh 'docker rm ml-model-test-container'
                }
            }
        }
        stage('Push ML Model Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub_credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh 'echo $DOCKER_PASS | docker login --username $DOCKER_USER --password-stdin'
                        sh 'docker push mlopsweather2023/ml-model-image:latest'
                        echo 'Image Docker ML Model poussée vers Docker Hub.'
                    }
                }
            }
        }
        stage('Deploy to Kubernetes (Test)') {
            steps {
                script {
                    // Copier les fichiers YAML de déploiement, de service et d'ingress pour l'environnement de test
                    sh 'cp Weather_Forecast/kubernetes/machine_learning/ml-deployment-test.yaml .'
                    sh 'cp Weather_Forecast/kubernetes/machine_learning/ml-service-test.yaml .'
                    sh 'cp Weather_Forecast/kubernetes/machine_learning/ingress-test.yaml .'

                    // Copier les fichiers dans le namespace de test
                    sh 'docker cp ./ml-deployment-test.yaml kind-control-plane:/ml-deployment.yaml'
                    sh 'docker cp ./ml-service-test.yaml kind-control-plane:/ml-service.yaml'
                    sh 'docker cp ./ingress-test.yaml kind-control-plane:/ingress.yaml'

                    // Appliquer les configurations dans le namespace de test
                    sh "docker exec kind-control-plane kubectl apply -f /ml-deployment.yaml --namespace=test --validate=false"
                    sh "docker exec kind-control-plane kubectl apply -f /ml-service.yaml --namespace=test --validate=false"
                    sh "docker exec kind-control-plane kubectl apply -f /ingress.yaml --namespace=test --validate=false"

                    echo 'Déploiement ML Model sur Kubernetes (Test) réussi.'
                }
            }
        }
        stage('Deploy to Kubernetes (Dev)') {
            steps {
                script {
                    // Copier les fichiers YAML de déploiement, de service et d'ingress pour l'environnement de dev
                    sh 'cp Weather_Forecast/kubernetes/machine_learning/ml-deployment-dev.yaml .'
                    sh 'cp Weather_Forecast/kubernetes/machine_learning/ml-service-dev.yaml .'
                    sh 'cp Weather_Forecast/kubernetes/machine_learning/ingress-dev.yaml .'

                    // Copier les fichiers dans le namespace de dev
                    sh 'docker cp ./ml-deployment-dev.yaml kind-control-plane:/ml-deployment.yaml'
                    sh 'docker cp ./ml-service-dev.yaml kind-control-plane:/ml-service.yaml'
                    sh 'docker cp ./ingress-dev.yaml kind-control-plane:/ingress.yaml'

                    // Appliquer les configurations dans le namespace de dev
                    sh "docker exec kind-control-plane kubectl apply -f /ml-deployment.yaml --namespace=dev --validate=false"
                    sh "docker exec kind-control-plane kubectl apply -f /ml-service.yaml --namespace=dev --validate=false"
                    sh "docker exec kind-control-plane kubectl apply -f /ingress.yaml --namespace=dev --validate=false"

                    echo 'Déploiement ML Model sur Kubernetes (Dev) réussi.'
                }
            }
        }
        stage('Deploy to Kubernetes (Prod)') {
            steps {
                script {
                    // Copier les fichiers YAML de déploiement, de service et d'ingress pour l'environnement de prod
                    sh 'cp Weather_Forecast/kubernetes/machine_learning/ml-deployment-prod.yaml .'
                    sh 'cp Weather_Forecast/kubernetes/machine_learning/ml-service-prod.yaml .'
                    sh 'cp Weather_Forecast/kubernetes/machine_learning/ingress-prod.yaml .'

                    // Copier les fichiers dans le namespace de prod
                    sh 'docker cp ./ml-deployment-prod.yaml kind-control-plane:/ml-deployment.yaml'
                    sh 'docker cp ./ml-service-prod.yaml kind-control-plane:/ml-service.yaml'
                    sh 'docker cp ./ingress-prod.yaml kind-control-plane:/ingress.yaml'

                    // Appliquer les configurations dans le namespace de prod
                    sh "docker exec kind-control-plane kubectl apply -f /ml-deployment.yaml --namespace=prod --validate=false"
                    sh "docker exec kind-control-plane kubectl apply -f /ml-service.yaml --namespace=prod --validate=false"
                    sh "docker exec kind-control-plane kubectl apply -f /ingress.yaml --namespace=prod --validate=false"

                    echo 'Déploiement ML Model sur Kubernetes (Prod) réussi.'
                }
            }
        }
        stage('Wait for Pod Initialization') {
            steps {
                script {
                    echo "Attente pour l'initialisation des pods..."
                    sh 'sleep 30' // Attente de 30 secondes
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline ML Model terminée. Vérifiez les logs pour les détails.'
        }
        failure {
            echo "La construction a échoué."
        }
    }
}
