pipeline {
    agent any
    environment {
        KUBECONFIG = '/var/jenkins_home/.kube/config'
    }
    stages {
        stage('Clone Repository') {
            steps {
                sh 'rm -rf Weather_Forecast'
                sh 'git clone -b BAS_ALAIN --single-branch https://github.com/TeamMlops2023/Weather_Forecast.git'
            }
        }
        stage('Build ML Model Image') {
            steps {
                script {
                    dir('Weather_Forecast/machine_learning') {
                        sh 'docker build -t mlopsweather2023/ml-model-image:latest .'
                        echo 'Construction de l\'image Docker ML Model réussie.'
                    }
                }
            }
        }
        stage('Run Tests') {
            steps {
                script {
                    // Nettoyer le conteneur s'il existe déjà
                    sh 'docker stop ml-model-test-container || true'
                    sh 'docker rm ml-model-test-container || true'

                    // Créer un conteneur temporaire pour exécuter les tests
                    sh 'docker run --name ml-model-test-container -d mlopsweather2023/ml-model-image:latest'
                    sh 'docker exec ml-model-test-container python /app/tests/test_modele.py'

                    // Nettoyer le conteneur après les tests
                    sh 'docker stop ml-model-test-container'
                    sh 'docker rm ml-model-test-container'
                }
            }
        }
        stage('Push ML Model Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub_credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh 'echo $DOCKER_PASS | docker login --username $DOCKER_USER --password-stdin'
                        sh 'docker push mlopsweather2023/ml-model-image:latest'
                        echo 'Image Docker ML Model poussée vers Docker Hub.'
                    }
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh 'cp Weather_Forecast/kubernetes/machine_learning/ml-deployment.yaml .'
                    sh 'cp Weather_Forecast/kubernetes/machine_learning/ml-service.yaml .'
                    sh 'docker cp ./ml-deployment.yaml kind-control-plane:/ml-deployment.yaml'
                    sh 'docker cp ./ml-service.yaml kind-control-plane:/ml-service.yaml'
                    sh "docker exec kind-control-plane kubectl apply -f /ml-deployment.yaml --validate=false"
                    sh "docker exec kind-control-plane kubectl apply -f /ml-service.yaml --validate=false"
                    echo 'Déploiement ML Model sur Kubernetes réussi.'
                }
            }
        }
        stage('Execute ML Script') {
            steps {
                script {
                    // Exécutez le script de modèle ML pour remplir la base de données
                    sh "docker exec kind-control-plane kubectl exec -it [nom_pod_ml_model] -- python /Weather_Forecast/machine_learning/modele.py"
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline ML Model terminé. Vérifiez les logs pour les détails.'
        }
    }
}
