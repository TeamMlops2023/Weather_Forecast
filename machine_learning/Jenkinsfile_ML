pipeline {
    agent any
    environment {
        KUBECONFIG = '/var/jenkins_home/.kube/config'
    }
    stages {
        stage('Prepare Environment') {
            steps {
                sh 'rm -rf Weather_Forecast'
            }
        }
        stage('Get kind-Kubeconfig') {
            steps {
                sh 'curl -LJO https://github.com/TeamMlops2023/Weather_Forecast/raw/BAS_ALAIN/kubernetes/kind-kubeconfig'
                echo 'kind-Kubeconfig récupéré depuis GitHub.'
            }
        }
        stage('Build and Push ML Model Image') {
            steps {
                script {
                    dir('machine_learning') {
                        sh 'docker build -t mlopsweather2023/ml-model-image:latest .'
                        sh 'docker push mlopsweather2023/ml-model-image:latest'
                    }
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh 'git clone -b BAS_ALAIN --single-branch https://github.com/TeamMlops2023/Weather_Forecast.git'
                    sh 'cp Weather_Forecast/kubernetes/machine_learning/ml-deployment.yaml .'
                    sh 'cp Weather_Forecast/kubernetes/machine_learning/ml-service.yaml .'
                    sh 'docker cp ./ml-deployment.yaml kind-control-plane:/ml-deployment.yaml'
                    sh 'docker cp ./ml-service.yaml kind-control-plane:/ml-service.yaml'
                    sh "docker exec kind-control-plane kubectl apply -f /ml-deployment.yaml --validate=false"
                    sh "docker exec kind-control-plane kubectl apply -f /ml-service.yaml --validate=false"
                    echo 'Déploiement ML Model sur Kubernetes réussi.'
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline ML Model terminé. Vérifiez les logs pour les détails.'
        }
    }
}
