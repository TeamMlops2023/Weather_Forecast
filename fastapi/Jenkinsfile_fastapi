pipeline {
    agent any
    environment {
        KUBECONFIG = '/var/jenkins_home/.kube/config'
    }
    stages {
        stage('Prepare Environment') {
            steps {
                sh 'rm -rf Weather_Forecast'
            }
        }
        stage('Clone Repository') {
            steps {
                sh 'git clone -b BAS_ALAIN --single-branch https://github.com/TeamMlops2023/Weather_Forecast.git'
            }
        }
        stage('Build Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub_credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'docker build -t mlopsweather2023/fastapi-image:latest ./fastapi'
                }
            }
        }
        stage('Run Docker Container') {
            steps {
                sh 'docker run -d --name fastapi-container -p 8000:8000 mlopsweather2023/fastapi-image:latest'
            }
        }
        stage('Run Tests') {
            steps {
                sh 'sleep 10' // Attendre que le serveur FastAPI démarre
                sh "docker exec fastapi-container python /app/tests/test_fastapi.py"
            }
        }
        stage('Docker Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub_credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login --username $DOCKER_USER --password-stdin'
                    sh 'docker push mlopsweather2023/fastapi-image:latest'
                }
            }
        }
        stage('Cleanup Test Container') {
            steps {
                sh 'docker stop fastapi-container || true'
                sh 'docker rm fastapi-container || true'
            }
        }
        stage('Deploy to Test Environment') {
            steps {
                sh "docker exec kind-control-plane kubectl get ns test || docker exec kind-control-plane kubectl create ns test"
                sh "docker exec kind-control-plane kubectl apply -f ./Weather_Forecast/kubernetes/fastapi/fastapi-deployment.yaml --namespace=test"
                sh "docker exec kind-control-plane kubectl apply -f ./Weather_Forecast/kubernetes/fastapi/fastapi-service.yaml --namespace=test"
                sh "docker exec kind-control-plane kubectl apply -f ./Weather_Forecast/kubernetes/ingress.yaml --namespace=test"
            }
        }
        stage('Deploy to Dev Environment') {
            steps {
                sh "docker exec kind-control-plane kubectl get ns dev || docker exec kind-control-plane kubectl create ns dev"
                sh "docker exec kind-control-plane kubectl apply -f ./Weather_Forecast/kubernetes/fastapi/fastapi-deployment.yaml --namespace=dev"
                sh "docker exec kind-control-plane kubectl apply -f ./Weather_Forecast/kubernetes/fastapi/fastapi-service.yaml --namespace=dev"
                sh "docker exec kind-control-plane kubectl apply -f ./Weather_Forecast/kubernetes/ingress.yaml --namespace=dev"
            }
        }
        stage('Deploy to Prod Environment') {
            steps {
                sh "docker exec kind-control-plane kubectl get ns prod || docker exec kind-control-plane kubectl create ns prod"
                input(id: 'Confirm', message: 'Êtes-vous sûr de vouloir déployer en production ?', ok: 'Déployer')
                sh "docker exec kind-control-plane kubectl apply -f ./Weather_Forecast/kubernetes/fastapi/fastapi-deployment.yaml --namespace=prod"
                sh "docker exec kind-control-plane kubectl apply -f ./Weather_Forecast/kubernetes/fastapi/fastapi-service.yaml --namespace=prod"
                sh "docker exec kind-control-plane kubectl apply -f ./Weather_Forecast/kubernetes/ingress.yaml --namespace=prod"
            }
        }
    }
    post {
        always {
            echo 'Pipeline terminé. Vérifiez les logs pour les détails.'
        }
        failure {
            echo "La construction a échoué."
        }
    }
}
