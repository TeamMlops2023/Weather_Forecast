pipeline {
    agent any
    environment {
        KUBECONFIG = '/var/jenkins_home/.kube/config'
    }
    stages {
        stage('Prepare Environment') {
            steps {
                sh 'rm -rf Weather_Forecast'
            }
        }
        stage('Clone Repository') {
            steps {
                sh 'git clone -b BAS_ALAIN --single-branch https://github.com/TeamMlops2023/Weather_Forecast.git'
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub_credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh 'docker build -t mlopsweather2023/fastapi-image:latest ./fastapi'
                        echo 'Construction de l\'image Docker réussie.'
                    }
                }
            }
        }
        stage('Docker Push') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub_credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh 'echo $DOCKER_PASS | docker login --username $DOCKER_USER --password-stdin'
                        sh 'docker push mlopsweather2023/fastapi-image:latest'
                        echo 'Image Docker poussée vers Docker Hub.'
                    }
                }
            }
        }
        stage('Deploy to Test Environment') {
            steps {
                script {
                    sh "kubectl get ns test || kubectl create ns test"
                    sh "kubectl apply -f ./Weather_Forecast/kubernetes/fastapi/test/fastapi-deployment.yaml --namespace=test"
                    sh "kubectl apply -f ./Weather_Forecast/kubernetes/fastapi/test/ingress-test.yaml --namespace=test"
                    echo 'Déploiement dans l\'environnement de test réussi.'
                }
            }
        }
        stage('Deploy to Dev Environment') {
            steps {
                script {
                    sh "kubectl get ns dev || kubectl create ns dev"
                    sh "kubectl apply -f ./Weather_Forecast/kubernetes/fastapi/dev/fastapi-deployment.yaml --namespace=dev"
                    sh "kubectl apply -f ./Weather_Forecast/kubernetes/fastapi/dev/ingress-dev.yaml --namespace=dev"
                    echo 'Déploiement dans l\'environnement de développement réussi.'
                }
            }
        }
        stage('Deploy to Prod Environment') {
            steps {
                script {
                    sh "kubectl get ns prod || kubectl create ns prod"
                    sh "kubectl apply -f ./Weather_Forecast/kubernetes/fastapi/prod/fastapi-deployment.yaml --namespace=prod"
                    sh "kubectl apply -f ./Weather_Forecast/kubernetes/fastapi/prod/ingress-prod.yaml --namespace=prod"
                    echo 'Déploiement dans l\'environnement de production réussi.'
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline terminé. Vérifiez les logs pour les détails.'
        }
        failure {
            echo "La construction a échoué."
        }
    }
}
