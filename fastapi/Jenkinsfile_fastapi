pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                script {
                    // Construit l'image Docker à partir du répertoire 'fastapi'
                    sh 'docker build -t fastapi-image ./fastapi'
                    echo 'Construction de l\'image Docker réussie.'
                }
            }
        }
        stage('Run') {
            steps {
                script {
                    // Démarre le conteneur Docker sur le port 8000
                    sh 'docker run -d --name fastapi-container -p 8000:8000 fastapi-image'
                    // Obtenir et stocker l'adresse IP du conteneur
                    CONTAINER_IP = sh(script: "docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' fastapi-container", returnStdout: true).trim()
                    echo "L'adresse IP du conteneur FastAPI est ${CONTAINER_IP}"
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    // Attendre que le serveur FastAPI démarre
                    sh 'sleep 10'
                    echo 'Début des tests des endpoints.'
                    // Exécuter les tests en passant l'adresse IP du conteneur
                    sh "pytest ./tests/test_fastapi.py --container-ip ${CONTAINER_IP}"
                }
            }
        }
        stage('Cleanup') {
            steps {
                script {
                    // Arrête le conteneur FastAPI s'il est en cours d'exécution
                    sh 'docker stop fastapi-container || true'
                    // Supprime le conteneur FastAPI
                    sh 'docker rm fastapi-container || true'
                    echo 'Arrêt et nettoyage du conteneur réussi.'
                }
            }
        }
    }

    post {
        always {
            // Affiche un message à la fin de l'exécution du pipeline
            echo 'Pipeline terminé. Vérifiez les logs pour les détails.'
        }
    }
}
