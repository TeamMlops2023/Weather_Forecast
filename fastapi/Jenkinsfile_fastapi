pipeline {
    agent any
    environment {
        KUBECONFIG = '/var/jenkins_home/.kube/config'
    }
    stages {
        stage('Get kind-Kubeconfig') {
            steps {
                // Télécharge kind-Kubeconfig depuis GitHub en utilisant curl
                sh 'curl -LJO https://github.com/TeamMlops2023/Weather_Forecast/raw/BAS_ALAIN/kubernetes/kind-kubeconfig'
                echo 'kind-Kubeconfig récupéré depuis GitHub.'
            }
        }
        stage('Build and Push') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub_credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh 'docker build -t mlopsweather2023/fastapi-image:latest ./fastapi'
                        echo 'Construction de l\'image Docker réussie.'
                        sh 'echo $DOCKER_PASS | docker login --username $DOCKER_USER --password-stdin'
                        echo 'Connexion à Docker Hub réussie.'
                        sh 'docker push mlopsweather2023/fastapi-image:latest'
                        echo 'Image Docker poussée vers Docker Hub.'
                    }
                }
            }
        }
        stage('Run') {
            steps {
                script {
                    sh 'docker run -d --name fastapi-container -p 8000:8000 mlopsweather2023/fastapi-image:latest'
                    CONTAINER_IP = sh(script: "docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' fastapi-container", returnStdout: true).trim()
                    echo "L'adresse IP du conteneur FastAPI est ${CONTAINER_IP}"
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    sh 'sleep 10'
                    sh "docker exec -e BASE_URL=http://${CONTAINER_IP}:8000 fastapi-container python /app/tests/test_fastapi.py"
                }
            }
        }
        stage('Cleanup') {
            steps {
                script {
                    sh 'docker stop fastapi-container || true'
                    sh 'docker rm fastapi-container || true'
                    echo 'Arrêt et nettoyage du conteneur réussi.'
                }
            }
        }
        stage('Cloner le Dépôt Git et Copier le Fichier de Déploiement') {
            steps {
                script {
                    // Cloner le dépôt Git pour récupérer le fichier fastapi-deployment.yaml
                    sh 'git clone https://github.com/TeamMlops2023/Weather_Forecast.git'
                    // Imprimer la structure des répertoires pour déboguer
                    sh 'ls -R Weather_Forecast/kubernetes/'
                    // Copier le fichier dans le répertoire actuel
                    sh 'cp Weather_Forecast/kubernetes/fastapi/fastapi-deployment.yaml .'
                }
            }
        }
        stage('Copy Deployment File to Kind') {
            steps {
                script {
                    // Copier le fichier depuis le workspace Jenkins vers le conteneur kind-control-plane
                    sh 'docker cp ./fastapi-deployment.yaml kind-control-plane:/fastapi-deployment.yaml'
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    sh "docker exec kind-control-plane kubectl apply -f /fastapi-deployment.yaml --validate=false"
                    echo 'Déploiement sur Kubernetes réussi.'
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline terminé. Vérifiez les logs pour les détails.'
        }
    }
}
