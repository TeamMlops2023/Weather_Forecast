pipeline {
    agent any
    environment {
        KUBECONFIG = '/var/jenkins_home/.kube/config'
    }
    stages {
        stage('Prepare Environment') {
            steps {
                sh 'rm -rf Weather_Forecast'
            }
        }
        stage('Clone Repository') {
            steps {
                sh 'git clone -b BAS_ALAIN --single-branch https://github.com/TeamMlops2023/Weather_Forecast.git'
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub_credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh 'docker build -t mlopsweather2023/fastapi-image:latest ./fastapi'
                        echo 'Construction de l\'image Docker réussie.'
                    }
                }
            }
        }
        stage('Run Docker Container') {
            steps {
                script {
                    sh 'docker run -d --name fastapi-container -p 8000:8000 mlopsweather2023/fastapi-image:latest'
                    CONTAINER_IP = sh(script: "docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' fastapi-container", returnStdout: true).trim()
                    echo "L'adresse IP du conteneur FastAPI est ${CONTAINER_IP}"
                }
            }
        }
        stage('Run Tests') {
            steps {
                script {
                    sh 'sleep 10'
                    sh "docker exec fastapi-container python /app/tests/test_fastapi.py"
                }
            }
        }
        stage('Docker Push') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerhub_credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh 'echo $DOCKER_PASS | docker login --username $DOCKER_USER --password-stdin'
                        sh 'docker push mlopsweather2023/fastapi-image:latest'
                        echo 'Image Docker poussée vers Docker Hub.'
                    }
                }
            }
        }
        stage('Cleanup Test Container') {
            steps {
                script {
                    sh 'docker stop fastapi-container || true'
                    sh 'docker rm fastapi-container || true'
                    echo 'Arrêt et nettoyage du conteneur de test réussi.'
                }
            }
        }
        stage('Deploy to Test Environment') {
            steps {
                script {
                    sh "docker exec kind-control-plane kubectl get ns test || docker exec kind-control-plane kubectl create ns test"
                    sh 'docker cp ./Weather_Forecast/kubernetes/fastapi/fastapi-deployment-test.yaml kind-control-plane:/fastapi-deployment-test.yaml'
                    sh 'docker cp ./Weather_Forecast/kubernetes/fastapi/fastapi-service-test.yaml kind-control-plane:/fastapi-service-test.yaml'
                    sh 'docker cp ./Weather_Forecast/kubernetes/fastapi/ingress-test.yaml kind-control-plane:/ingress-test.yaml'
                    sh "docker exec kind-control-plane kubectl apply -f /fastapi-deployment-test.yaml --namespace=test"
                    sh "docker exec kind-control-plane kubectl apply -f /fastapi-service-test.yaml --namespace=test"
                    sh "docker exec kind-control-plane kubectl apply -f /ingress-test.yaml --namespace=test"
                    echo 'Déploiement dans l\'environnement de test réussi.'
                }
            }
        }
        stage('Deploy to Dev Environment') {
            steps {
                script {
                    sh "docker exec kind-control-plane kubectl get ns dev || docker exec kind-control-plane kubectl create ns dev"
                    sh 'docker cp ./Weather_Forecast/kubernetes/fastapi/fastapi-deployment-dev.yaml kind-control-plane:/fastapi-deployment-dev.yaml'
                    sh 'docker cp ./Weather_Forecast/kubernetes/fastapi/fastapi-service-dev.yaml kind-control-plane:/fastapi-service-dev.yaml'
                    sh 'docker cp ./Weather_Forecast/kubernetes/fastapi/ingress-dev.yaml kind-control-plane:/ingress-dev.yaml'
                    sh "docker exec kind-control-plane kubectl apply -f /fastapi-deployment-dev.yaml --namespace=dev"
                    sh "docker exec kind-control-plane kubectl apply -f /fastapi-service-dev.yaml --namespace=dev"
                    sh "docker exec kind-control-plane kubectl apply -f /ingress-dev.yaml --namespace=dev"
                    echo 'Déploiement dans l\'environnement de développement réussi.'
                }
            }
        }
        stage('Deploy to Prod Environment') {
            steps {
                script {
                    sh "docker exec kind-control-plane kubectl get ns prod || docker exec kind-control-plane kubectl create ns prod"
                    sh 'docker cp ./Weather_Forecast/kubernetes/fastapi/fastapi-deployment-prod.yaml kind-control-plane:/fastapi-deployment-prod.yaml'
                    sh 'docker cp ./Weather_Forecast/kubernetes/fastapi/fastapi-service-prod.yaml kind-control-plane:/fastapi-service-prod.yaml'
                    sh 'docker cp ./Weather_Forecast/kubernetes/fastapi/ingress-prod.yaml kind-control-plane:/ingress-prod.yaml'
                    timeout(time: 15, unit: 'MINUTES') {
                        input message: 'Voulez-vous déployer en production ?', ok: 'Déployer'
                    }
                    sh "docker exec kind-control-plane kubectl apply -f /fastapi-deployment-prod.yaml --namespace=prod"
                    sh "docker exec kind-control-plane kubectl apply -f /fastapi-service-prod.yaml --namespace=prod"
                    sh "docker exec kind-control-plane kubectl apply -f /ingress-prod.yaml --namespace=prod"
                    echo 'Déploiement dans l\'environnement de production réussi.'
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline terminé. Vérifiez les logs pour les détails.'
        }
        failure {
            echo "La construction a échoué."
        }
    }
}
